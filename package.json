{
  "name": "calculatorforme",
  "version": "1.0.0",
  "description": "Me\r Code convention(code style)\r --------\r ```\r HTML\r ```\r 1. Все стили подключаются через `<link/>` в `<head></head>`.\r 2. Путь пишем относительный.\r 3. Не ставим enters для пустых строк в html коде.\r 4. Если в теге стоит только текст, длина которого меньше 120 символов, то не переносим закрывающий тег на новую строку.\r 5. Если два и больше елемента в теге, то закрывающий тег и сождержимое переносим на новую строку. \r 6. Грамотно используем синтаксик HTML5.\r 7. Все скрипты подключаем перед закрывающим тегом `</body>`.\r 8. Не используем тег `<image>` для картинок. Используем свойства CSS и тег `<div>`:\r ```\r <!--HTML-->\r <div class=\"div__image\"></div>\r //CSS\r .div__image {\r     background-image: url(...);\r     background-position: center;\r     background-repeat: no-repeat;\r     background-size: contain;\r }\r ```\r ```\r CSS\r ```\r 1. Классы подписываем по методологии BEM(Block-element-modifier):\r ```\r .body {...}\r .body__header {...}\r .body__header_title {...}\r ```\r 2. `id` не называем так же как и классы.\r 3. Для позицианирования используем flex.\r 4. Стили прописываем в отдельных файлах с расширением `.css`.\r 5. Ведем переменные для глобальных стилей.\r 6. Все глобальные стили прописаны в соответствующем файле `global.css`.\r 7. Приветствуется использование препроцессоров.\r ```\r JavaScript\r ```\r 1. Переменные которые, не будут изменяться, стараться обзывать `const` при инициализации. Никаких `var`.\r 2. Инициализировать переменные вверху определенной области видимости или лексического окружения. \r 3. Между вычеслительными, бинарными, унарными, тернарными знаками и выражениями ставить пробелы. Пример: \r ```\r (!a && a !== 0) || (!b && b !== 0)\r ```\r 4. После инициализации переменных, перед условными операторами и циклами, и после них, ставим enter.\r 5. Отделаяем enter определенную логику действий в коде внутри функций.\r 6. Используем `function` только при необходимости. В остальных случаях `() => {}`.\r 7. Стараемся избегать использования циклов.\r 8. Используем активно методы массивов.\r 9. Следуем кодстайлу ES6+.\r 10. Имя всех переменных несут в себе смысловую информацию о самих переменных: `namesArray, car, numbersSum`.\r 11. Название переменных состоящие из двух слов и больше пишутся camelCase: `myVariable, myArray, newFunction`.\r 12. Функции должны в своем названии иметь глагол отвечающий за свое выполнение: `init, getFactorial, calculateNumbers, run, devide`.",
  "main": "index.html",
  "directories": {
    "test": "tests"
  },
  "scripts": {
    "test": "start"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nik00did/CalculatorForMe.git"
  },
  "author": "Y_N",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/nik00did/CalculatorForMe/issues"
  },
  "homepage": "https://github.com/nik00did/CalculatorForMe#readme",
  "dependencies": {
    "sinon": "^8.0.4"
  }
}
